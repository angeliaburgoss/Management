@using Management.Models
@using Management.Services
@page "/machines"
@rendermode InteractiveServer
 @* @inject NavigationManager Navigation *@
@inject MachineService MachineService


<h3>Machine List</h3>

<div>
    <h4>Add new Machine</h4>
    <input type="text" @bind="newMachineName" placeholder="Name" />
    <button class="btn btn-primary" @onclick="AddMachine">Add</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>ID</th>
            <th>Status</th>
            <th>Latest data</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var machine in machines)
        {
            <tr>
                <td>@machine.Name</td>
                <td>@machine.Id</td>
                <td>@(machine.IsOnline ? "Online" : "Offline")</td>
                <td>@machine.LastData</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => SendData(machine.Id)">Send data</button> 
                    <button class="btn btn-primary" @onclick="() => RemoveMachine(machine.Id)">Remove</button>
                    <button class="btn btn-primary" @onclick="() => StartMachine(machine.Id)" disabled="@(machine.IsOnline)">Start</button>
                    <button class="btn btn-primary" @onclick="() => StopMachine(machine.Id)" disabled="@(machine.IsOnline == false)">Stop</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Machine> machines;
    private string newMachineName;

    protected override async Task OnInitializedAsync()
    {
        machines = MachineService.GetMachines();
    }

    private async Task AddMachine()
    {
        if (!string.IsNullOrEmpty(newMachineName))
        {
            await MachineService.AddMachine(newMachineName);
            machines = MachineService.GetMachines();
            newMachineName = string.Empty; // Reset input field
        }
    }

    private async Task RemoveMachine(Guid id)
    {
        await MachineService.RemoveMachine(id);
        machines = MachineService.GetMachines();
    }

    private async Task SendData(Guid id)
    {
        await MachineService.SendDataToMachine(id, "New data from admin");
        machines = MachineService.GetMachines();
    }

    private async Task StartMachine(Guid id)
    {
        await MachineService.StartMachine(id);
        machines = MachineService.GetMachines();
    }

    private async Task StopMachine(Guid id)
    {
        await MachineService.StopMachine(id);
        machines = MachineService.GetMachines();
    }
}
